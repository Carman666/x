在创建的app中的views.py中：
1.首先导入库
form django.shortcuts import render
2.而后定义视图函数，其中，request.GET = {"id" : 3}  GET相当于字典请求，具体看book app的views.py文件
3.定义完视图函数后，去到urls.py文件里实现映射，与django基本操作里加path操作一致，但是前提要在此文件中导入from book import views，以次来识别views文件里的内容。
【注意：在path中填写的视图函数后续要把自带的括号删除，具体可以看文件里的操作】
-----------------------------------------------------------------------------
关于django里的<book-id>表示形参，与flask里的表达不太相同。如果要在django里定义<xx>,则在views.py文件里定义视图函数里的request后续跟一个要定义的形参，具体操作可以看文件里的形式。
-------------------------------------------------------------------------------
关于渲染模板：
最简单最快捷的一种方式，直接将模板渲染成字符串和包装成HttpResponse对象一步到位完成，代码示例如下：
from django.shortcuts import render
def book-list(request):
 	return render(request,'list.html')
------------------------------------------------------------------------------
视图函数传参：
1.普通传参：先定义一个变量名xx，后续在render里添加一个context={"xx":xx}，在html文件里添加像jinja2类似的{{ xx }}进行传参。
2.字典类型传参：定义一个变量名book，写成字典类型，后续操作一样{{ book.key }}。
3.列表传参：定义一个列表【如果参数过多，可以将context单独领出来】,后续操作一样{{ books.1.key }}，多了一个要选择下标数
4.对象传参：
class Person:
 	def __init__(self,realname):
 		self.realname = realname
在后续的context中，{"person":Person("realname")}，里面的realname自己填写内容，在html文件中添加{{ person.realname }}则可以实现对象传参。
---------------------------------------------------------------------------[以下基于templatedemo文件夹]
模板标签（写法）：
1.if语句：
{% if "xx" in person %}
 	<p>xx</p>
{% else %}
 	<p>xxx</p>
{% endif %}
2.for语句：
{% for person in persons （reversed）%}
 	<p>{{ person.name }}</p>
{% endfor %}
!如果想要反向遍历，那么在遍历时加上reversed，得出结果是前后顺序互换
3.遍历字典时：
{% for key,value in person.tiems %}
 	<p>key:{{ key }}</p>
 	<p>value:{{ value }}</p>
{% endfor %}
4.for循环的变量：
forloop.counter：当前循环的下标，以1作为起始点【增加序号】
forloop.counter0：当前循环的下标以0作为起始点
forloop.revcounter：当前循环的反向下标值，从最后一个元素开始遍历
forloop.revcounter0：与上一个相似，不同的是从最后一个元素的下标是从0开始
forloop.first：是否是第一次遍历
forloop.last：是否是最后一次遍历
forloop.parentloop：如果是多重循环嵌套，那么这个属性代表是上一级的for循环
///
5.for...in...empty与for语句一样，只不过在遍历时对象可能存在没有元素的情况：
{% for person in persons %}
 	<li>{{ person.name }}</li>
{% empty %}
 	暂时没有任何人
{% endfor %}
6.with标签：【在变量访问比较复杂的情况，可以先将复杂的变量缓存到一个变量上，而后直接使用】
context = {
 	"persons" : ["张三","李四"】
}
{% with list = person.1 %}
 	<p>{{ list }}</p>
{% endwith %} 				输出->李四
///
{% with persons.1 as list %}
 	<p>{{ list }}</p>
{% endwith %}
7.url标签：【建议使用反转的方式来实现】
<a href="{% url 'book:list'  %}">图书列表页面</a>
1)如果需要传递参数，可以在后面传递，但是！！参数分位置参数和关键字参数，位置参数和关键字参数不能同时使用。eg.
#path部分
path('detail/<book_id>/',views.book_detail,name='detail')
#url反转
<a href="{% url 'book:list' 1 %}">图书详情页面</a>
#url反转，使用关键字参数
<a href="{% url 'book:detail' book\_id=1 %}">图书详情页面</a>
2)如果使用url标签反转时需要传递查询字符串的参数，则与flask相同，手动在后面添加即可
<a href="{% url 'book:detail' book\_id=1 %}?page=1">图书详情页面</a>
3)如果需要传递多个参数，则用空格的方式进行分隔
<a href="{% url 'book:detail' book\_id=1 page=2 %}">图书详情页面</a>
8.spaceless标签：【移除html文件中的空白字符】
{% spaceless %}
 	<p>
 		<a href='foo/'>Foo<a/>
 	</p>
{% endspaceless %}  			渲染后代码-><p><a href='foo/'>Foo</a></p>
9.authoescape标签：【开启和关闭标签内元素的自动转义功能】
#传递上下文信息
context = {
 	"info":"<a href = 'www.baidu.com'>百度</a>"
}
#模板中关闭自动转义
{% autoescape off %}
 	{{ info }}
{% endautoescape %}		输出->没有转义的baidu超链接www.baidu.com
把off改为on，输出则为转义后的普通字符串
10.verbatim标签：【默认在DTL模板中是会去解析特殊字符】
{% verbatim %}
 	{{ if dying }}Still alive.{{ /if }}
{% endverbatim %}
--------------------------------------------------------------------------
模板中常用的过滤器
1.add：将传进来的参数添加到原来的值上面，add过滤器会尝试将值和参数转换成整型然后进行相加，如果不是整型，，则将字符串进行拼接。
{{ value|add:"2" }}
2.cut：移除值中所有指定的字符串。
{{ value|cut:" " }}		#移除所有空格字符
3.date：将一个日期按照指定格式，格式化成字符串。
{{ value|date:"Y/m/d" }}
【Y：四位数字的年份】
【m：两位数字的月份，01-12】
【n：没有前缀0的月份，1-12】
【d：两位数字的天，01-31】
【j：没有前缀0的天，1-31】
【g/G：没有前缀0的小时，1-23】
【h/H：两位数字的小时01-23】
【i：两位数的分钟，00-59】
【s：两位数的秒】
4.default：如在[ ]," ",None,{ }等这些在if判断中被判为Flase值，则会被default过滤器提供的默认值输出
{{ value|default:"nothing" }}		【如果value为空字符串】输出->nothing
5.default_if_none：如果值为None，输出的值才会使用default_if_none提供的默认值。
{{ value|default_if_none:"nothing" }}
6.first：返回列表/元组/字符串中第一个元素
{{ value|first }}
7.last：返回列表/元组/字符串中最后一个元素
{{ value|last }}
8.floatformat：使用四舍五入的方式格式化一个浮点数。如果此过滤器没有传递任何参数，则只会保留一个小数；如果小数全是0，则保留整数[：后面的为保留几位小数]
{{ value|floatformat:2 }}
9.join：与python中join类似，将元组/列表/字符串用指定字符进行拼接
{{ value|join:"/" }}
10.length：获取一个列表/元组/字符串/字典的长度
{{ value|length }}
11.lower/upper：将值中所有字符转为小写/大写
{{ value|lower/upper }}
12.random：在被给的列表/字符串/元组中随机一个值
{{ value|random }}
13.safe:标记一个字符串是安全的，也会关掉字符串的自动转义，示例看代码
{ value|safe }}
14.stringtags：删除字符串中所有html标签
{{ value|stringtags }}
【如果value是<strong>hello</strong>,   输出->hello】
15.truncatechars：给定字符串长度超过过滤器指定长度，则会进行切割，并且会拼接三个点作为省略号
{{ value|truncatechars:5 }}
【eg.value=北京欢迎你 ，输出->北京...】
16.truncatechars_html：依旧切割，但是不会切割html标签
----------------------------------------------------------------------------
模板结构
1.include模板：include标签寻找路径方式，跟render渲染模板函数一样；删除重复代码用include包含起来，eg.
#header.html
<p>我是header</p>
#footer.html
<p>我是footer</p>
#main.html
{% include 'header.html' %}
<p>我是main内容</p>
{% incude 'footer.html' %}
【具体用法看文件include.html】是将其他文件的代码用一句include概括，自动使用包含模板的上下文，也可以自动使用模板中的变量，传入其他参数可以与with语句连用：
2.extends标签：定义两个block接口，让子模版根据需求实现，子模版根据extends标签来实现，具体案例看base.html和1_base.html
【注意：extends标签必须放在模板的第一行，子模版中的代码必须放在block中，否则不会被渲染】
【如果某个block中需要使用父模板内容，则可以使用{{ block.super }}来继承，除了在block开始的地方定义名字，还可以在block结束的时候定义名字，这个在大型模板中尤其重要，能让你快速看到block包含在哪里】
----------------------------------------------------------------------------------

加载静态文件：
1.确保settings.py中的INSTALLED_APPS里有django.contrib.staticfiles
2.确保settings.py中设置了STATIC_URL='static/'
3.导入：先在开头加载load标签{% load static %}
然后在title下写入以导入css文件和js文件
<link rel="stylesheet" href="{% static 'css/index.css' %}">
<script src="{% static 'js/index.js' %}"></script>