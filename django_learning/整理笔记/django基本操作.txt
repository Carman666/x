创建项目：打开终端，输入django-admin startproject [项目名称]
eg.   django-admin startproject one    即可创建成功one项目，可以自行去添加一个文件templates

创建应用（app）：一个项目类似于一个架子，app为核心。在终端进入项目所在路径，然后执行python manage.py startapp [app名称] 以次来创建一个app

运行项目：输入命令python manage.py runserver 显示默认端口号8000

django包含的py文件含义
1.manage.py：与项目交互，一般在终端输入python manage.py[子命令]，初学者一般不编辑此文件。
2.settings.py：本项目的设置项，后续所有相关配置都存放在此文件中。
3.urls.py：此文件由于配置url路由。如访问http://127.0.0.1/news/ 是用于访问新闻列表页面，这些东西需要在此文件中完成。
4.wsgi.py：项目于WSGI协议兼容的web服务器入口，部署时需要用到此文件，但是在一般情况下不需要修改。

project和app的关系：
1.app是django项目的组成部分，一个app代表项目中的一个模块，所有url请求的响应都由app来处理
2.django由多个app组成，一个app也可以用到其他项目中去。
3.创建app：输入命令python manage startapp [app名字]


定义视图函数，并能在网页上面执行（在urls.py文件编写）：【但在一般情况下，在创建的app中views.py文件中定义视图函数】
1.首先导入库
from django.shortcuts import HttpResponse
2.然后写视图函数
def index(request):
	return HttpResponse("欢迎来到门的世界")
3.让网页能够访问我们的视图函数，因此在下面的urlpatterns中原有的基础上再加上一个path
 urlpatterns = [
    path("admin/", admin.site.urls),   #原有的代码
    path('',index)      #新添可以引用视图函数的代码

！！如果存在ModuleNotFoundError: No module named 'django.templates'，需去settings.py文件里找到templates这个地方，看django后续跟着的templates是否为单数，如果是templates复数则把s去掉即可。

与flask不同，这里填写需要访问的后缀不需要加"/"，eg.   path("door",index)


path函数定义：
1.path(route:表示路由,views:视图函数/类视图,name=None：给url取名字,kwargs=None)
views：类视图.as_view( ) 或者django.urls.include( )函数的返回值

类型（展示特殊的）： path匹配非空的英文字符串，可以包含斜杠 /
				slug由英文中的横杠-，下划线 连接英文字符，或者数字组成的字符串
				uuid匹配uuid字符串
